{#
/**
 * @file
 * Bootstrap Barrio's theme implementation to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
     Only "getter" methods (method names starting with "get", "has", or "is")
     and a few common methods such as "id" and "label" are available. Calling
     other methods (such as node.delete) will result in an exception.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 */
#}
{{ attach_library('YC_theme/productnode') }}
{{ attach_library('bootstrap_barrio/node') }}


{%
  set classes = [
    'node',
    'node--type-' ~ node.bundle|clean_class,
    node.isPromoted() ? 'node--promoted',
    node.isSticky() ? 'node--sticky',
    not node.isPublished() ? 'node--unpublished',
    view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
    'clearfix',
  ]
%}


<article{{attributes.addClass(classes)}}>
	<header>
		{{ title_prefix }}
		{% if label and not page %}
			<h2{{title_attributes.addClass('node__title')}}>
				<a href="{{ url }}" rel="bookmark">{{ label }}</a>
			</h2>
		{% endif %}
		{{ title_suffix }}
		{% if display_submitted %}
			{# Display the submission information here if needed #}
		{% endif %}
	</header>
	<div
		class="">
		{# Center the entire content div #}
		<div {{content_attributes.addClass('content')}}>
			<div class="row">
				<div class="col-md-6">
					<div style="background-color: #f0f0f0; border-radius: 10px; margin: 10px; overflow: hidden;" class="p-3 d-flex align-items-center justify-content-center w-100">
						<img src="{{ file_url(content.field_image['#items'].entity.uri.value) }}" class="image img-fluid" alt="content-image" style="max-height: 340px;"/>
					</div>
				</div>


				<div class="col-md-6">
					<div>
						<div style="display: flex; align-items: center;">
							<h1 style="margin-right: 10px;">{{ node.label }}</h1>
							{% if content.field_for_hire.0["#title"] == "Yes" %}
								<span class="badge rounded-pill text-bg-success text-white">For Hire</span>
							{% else %}
								<span class="badge rounded-pill text-bg-danger text-white">Not for Hire</span>
							{% endif %}
						</div>
						{% if content.field_size_dimension['#title'] %}
							<p><strong>{{content.field_size_dimension['#title']}}:</strong> {{content.field_size_dimension.0}}</p>
						{% endif %}
						<button class="btn btn-primary d-flex align-items-center justify-content-center text-sm fw-medium border bg-background h-11 rounded-md px-4 w-100 mb-3" data-bs-toggle="modal" data-bs-target="#exampleModal" onclick="setTimeout(view_pdf, 500)">
							<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewbox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-6 h-6 me-2">
								<path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"></path>
								<polyline points="14 2 14 8 20 8"></polyline>
							</svg>
							View Layout
						</button>

						<div class="accordion accordion-flush" id="accordionExample">
							{% if content.field_industry['#title'] %}
								<div class="accordion-item">
									<h2 class="accordion-header" id="panelsStayOpen-headingOne">
										<button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#panelsStayOpen-collapseOne" aria-expanded="false" aria-controls="panelsStayOpen-collapseOne">
											Industry
										</button>
									</h2>
									<div id="panelsStayOpen-collapseOne" class="accordion-collapse collapse" aria-labelledby="panelsStayOpen-headingOne">
										<div class="accordion-body">
											{{ content.field_industry }}
										</div>
									</div>
								</div>
							{% endif %}

							{% if content.field_product_type['#title'] %}
								<div class="accordion-item">
									<h2 class="accordion-header" id="panelsStayOpen-headingOne">
										<button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#panelsStayOpen-collapseOne" aria-expanded="false" aria-controls="panelsStayOpen-collapseOne">
											Product Type
										</button>
									</h2>
									<div id="panelsStayOpen-collapseTwo" class="accordion-collapse collapse" aria-labelledby="panelsStayOpen-headingTwo">
										<div class="accordion-body">
											{{ content.field_product_type }}
										</div>
									</div>
								</div>
							{% endif %}

							{% if content.field_events['#title'] %}
								<div class="accordion-item">
									<h2 class="accordion-header" id="panelsStayOpen-headingOne">
										<button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#panelsStayOpen-collapseOne" aria-expanded="false" aria-controls="panelsStayOpen-collapseOne">
											Event
										</button>
									</h2>
									<div id="panelsStayOpen-collapseThree" class="accordion-collapse collapse" aria-labelledby="panelsStayOpen-headingThree">
										<div class="accordion-body">
											{{ content.field_events }}
										</div>
									</div>
								</div>
							{% endif %}
						</div>


					</div>
				</div>


			</div>
		</div>

	</div>
</article>
<br>
<br>
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/4.0.269/pdf.min.mjs" type="module"></script>

<script type="module">

	var {
pdfjsLib
} = globalThis;
pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/4.0.269/pdf.worker.min.mjs';
</script>

<script>
	function view_pdf() {

var url = '{{ content.field_pdf.0["#markup"] }}';
if (! url) {
alert("No PDF found");
}
var loadingTask = pdfjsLib.getDocument(url);
loadingTask.promise.then(function (pdf) {
console.log('PDF loaded');
var pageNumber = 1;
pdf.getPage(pageNumber).then(function (page) {
console.log('Page loaded');
var desiredWidth = document.querySelector('.pdfWrapper').clientWidth;
console.log(desiredWidth);
var adjWidth = desiredWidth;
var viewport = page.getViewport({scale: 1});
var scale = adjWidth / viewport.width;
var scaledViewport = page.getViewport({scale: scale});
var canvas = document.getElementById('the-canvas');
var context = canvas.getContext('2d');
canvas.height = scaledViewport.height;
canvas.width = scaledViewport.width;
console.log(adjWidth);
console.log(scale);
console.log(canvas.height, canvas.width);
var renderContext = {
canvasContext: context,
viewport: scaledViewport
};
var renderTask = page.render(renderContext);
renderTask.promise.then(function () {
console.log('Page rendered');
});
});
}).catch(function (reason) {
console.error(reason);
});
}

// Execute view_pdf function after a delay of 500ms
</script>

<script></script>


<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="exampleModalLabel">{{ node.label }}
					Layout</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<div class="pdfWrapper" style"width: 100%;">
					<canvas id="the-canvas"></canvas>
				</div>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
				<a href={{ content.field_pdf.0["#markup"] }}>
					<button type="button" class="btn btn-primary">Download</button>
				</a>
			</div>
		</div>
	</div>
</div>
